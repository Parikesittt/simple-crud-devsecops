name: CI/CD Pipeline for Laravel
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build:
    name: Build Stage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: zip, pdo_mysql, mbstring, exif, pcntl, bcmath, gd
          coverage: none

      - name: Install Composer Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install NPM Dependencies
        run: npm install

      - name: Build Assets
        run: npm run build

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Generate key
        run: php artisan key:generate

      - name: Cache Application
        uses: actions/cache@v3
        with:
          path: |
            vendor
            node_modules
            public/build
          key: ${{ runner.os }}-build-${{ github.sha }}

  test:
    name: Test Stage
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: zip, pdo_mysql
          coverage: xdebug

      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: |
            vendor
            node_modules
            public/build
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Generate key
        run: php artisan key:generate

      - name: Set up database
        run: |
          touch database/database.sqlite
          php artisan migrate --force
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite

      - name: Run Unit Tests with Coverage
        run: vendor/bin/phpunit --coverage-clover=coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          retry_max_count: 3
          retry_delay_seconds: 30

  security-sast:
    name: Security Scanning (SAST)
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Install PHP Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Run PHPStan
        run: |
          composer require --dev phpstan/phpstan
          vendor/bin/phpstan analyse app tests --level=5
      - name: Run PHP Code Sniffer
        run: |
          composer require --dev squizlabs/php_codesniffer
          vendor/bin/phpcs --standard=PSR12 app tests

  security-dast:
    name: Security Testing (DAST)
    needs: security-sast
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, bcmath

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Set up Application
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan key:generate
          php artisan serve --host=0.0.0.0 --port=8000 &
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ":memory:"

      - name: Wait for Application
        run: |
          for i in {1..60}; do
            if [[ "$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8000)" == "302" ]]; then
              echo "Server is up!"
              exit 0
            fi
            echo "Waiting for server..."
            sleep 5
          done
          echo "Server did not start within 5 minutes."
          exit 1

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'http://localhost:8000'
          fail_action: false
          allow_issue_writing: true
          cmd_options: '-a'

  deploy:
    name: Deploy to GitHub Pages
    needs: security-dast
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install Dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Build Assets
        run: |
          npm install
          npm run build
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
